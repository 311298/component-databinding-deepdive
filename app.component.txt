section 5: component and databinding deep dive

=================================================================================

note : ng g c --skip-tests=true componentName -> to not create the spec.ts file

64.
breaked the AppComponent into 2 component like cockpit component and server-element component.
And will be using the input and output between the child and parent component.

65.
oveview of property and data binding

66.
when we try to apply the for loop inside of the component tag, few things to remember.
1st list must be defined inside the component where you are apply, means app.html and app.ts have list definition.
2nd when we will do property binding known element inside the component tag must be defined or else error.
@Input( ) variable -> when we apply the input decorator before the variable now it will be accessible to the parent component of that particular component.
To show it we need the property binding [variable in child component]="variable from parent component"

67.
@Input('alias') [alias]="expression".

69.
first we saved data in 2 variables named newservername and newservercontent.
two different function were assigned for 2 different button.
2 custom output event are created using @Output() nameofevent= new eventemitter<type and data need to passed for example string or complex one is {key1:type1,key2:type2}>.
on function we need to emit those by calling eventemitter varaiable and emit it.
one thing to note that where we output that event must have same type or else data will not render.
things to remember is all the action of input and output is done on child component.

70.
we can also put alias in ouput decorator

72.
for each component angular gives special attributes through which each html element will have unique ID to identify with.

73.
inside the @Component decorator we add the encapsulation : viewEncapsulatioShadowDomn and it has 3 properties.
emulated is by default.
none -> the component where it is applied will not strange attributes and if we apply the css here in the component it will render globally.
shadowDom -> will give same result as emulated but where it is supported in the browsers.

74.
Instead of 2 way data binding we can create the local reference using the #.
and pass it inside the function where it has been used. 
important thing to note that is #localreference is only defined inside the html template.
to access it inside the .ts file we have to pass it using the function.

75.
    @ViewChild('serverContentInput', {static: true}) serverContentInput: ElementRef;
    